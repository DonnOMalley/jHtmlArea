// jHtmlArea - http://jhtmlarea.codeplex.com - (c)2014 Chris Pietschmann
// Updated APR 02 2019 Donn O'Malley
// Updated Sept 02 2019 Donn O'Malley

!function (l, o) { var r = (o.$jhtmlarea = {}).browser = {}; r.msie = !1, r.mozilla = !1, r.safari = !1, r.version = 0, navigator.userAgent.match(/MSIE ([0-9]+)\./) ? (r.msie = !0, r.version = parseFloat(RegExp.$1)) : navigator.userAgent.match(/Trident\/([0-9]+)\./) && (r.msie = !0, r.version = RegExp.$1, navigator.userAgent.match(/rv:([0-9]+)\./) && (r.version = parseFloat(RegExp.$1))), navigator.userAgent.match(/Mozilla\/([0-9]+)\./) && (r.mozilla = !0, 0 === r.version && (r.version = parseFloat(RegExp.$1))), navigator.userAgent.match(/Safari ([0-9]+)\./) && (r.safari = !0, r.version = RegExp.$1, navigator.userAgent.match(/Version\/([0-9]+)\./) && 0 === r.version && (r.version = parseFloat(RegExp.$1))), l.fn.htmlarea = function (t) { if (t && "string" == typeof t) { for (var e = [], i = 1; i < arguments.length; i++)e.push(arguments[i]); var n = h(this[0]), o = n[t]; if (o) return o.apply(n, e) } return this.each(function () { h(this, t) }) }; var h = o.jHtmlArea = function (t, e) { return t.jquery ? h(t[0]) : t.jhtmlareaObject ? t.jhtmlareaObject : new h.fn.init(t, e) }; h.fn = h.prototype = { jhtmlarea: "0.8", init: function (t, e) { if ("textarea" === t.nodeName.toLowerCase()) { var i = l.extend({}, h.defaultOptions, e), n = (t.jhtmlareaObject = this).textarea = l(t), o = this.container = l("<div/>").addClass("jHtmlArea").width(n.width()).insertAfter(n), r = this.toolbar = l("<div/>").addClass("ToolBar").appendTo(o); c.initToolBar.call(this, i); var s = this.iframe = l("<iframe/>").height(n.height()); s.width(n.width()); var a = this.htmlarea = l("<div/>").append(s); o.append(a).append(n.hide()), c.initEditor.call(this, i), c.attachEditorEvents.call(this), s.height(s.height() - r.height()), r.width(n.width()), i.loaded && i.loaded.call(this) } }, dispose: function () { this.textarea.show().insertAfter(this.container), this.container.remove(), this.textarea[0].jhtmlareaObject = null }, execCommand: function (t, e, i) { if (this.iframe[0].contentWindow.focus(), !0 === r.msie && 11 <= r.version && this.previousRange) { var n = this.previousRange, o = this.getSelection(); o.removeAllRanges(), o.addRange(n) } this.editor.execCommand(t, e || !1, i || null), this.updateTextArea() }, ec: function (t, e, i) { null != i && this.execCommand(t, e, i) }, queryCommandValue: function (t) { return this.iframe[0].contentWindow.focus(), this.editor.queryCommandValue(t) }, qc: function (t) { return this.queryCommandValue(t) }, getSelectedHTML: function () { if (r.msie) return this.getRange().htmlText; var t = this.getRange().cloneContents(); return l("<p/>").append(l(t)).html() }, getSelection: function () { return !0 === r.msie && r.version < 11 ? this.editor.selection : this.iframe[0].contentDocument.defaultView.getSelection() }, getRange: function () { var t = this.getSelection(); return t ? t.getRangeAt && 0 < t.rangeCount ? t.getRangeAt(0) : t.createRange ? t.createRange() : null : null }, html: function (t) { if (void 0 === t) return this.toHtmlString(); this.textarea.val(t), this.updateHtmlArea() }, pasteHTML: function (t) { this.iframe[0].contentWindow.focus(); var e = this.getRange(); null === e ? alert("Error attempting to embed html") : (r.msie ? (e.deleteContents(), e.insertNode(l(this.iframe[0].contentWindow.document.body).append(t))) : r.mozilla ? (e.deleteContents(), e.insertNode(l(this.iframe[0].contentWindow.document.body).append(t))) : (e.deleteContents(), e.insertNode(l(this.iframe[0].contentWindow.document.createElement("span")).append(l(t))[0])), e.collapse(!1), e.select(), this.updateTextArea()) }, cut: function () { this.ec("cut") }, copy: function () { this.ec("copy") }, paste: function () { this.ec("paste") }, bold: function () { this.ec("bold") }, italic: function () { this.ec("italic") }, underline: function () { this.ec("underline") }, strikeThrough: function () { this.ec("strikethrough") }, image: function (t) { !0 !== r.msie || t ? this.ec("insertImage", !1, t || prompt("Image URL:", "http://")) : this.ec("insertImage", !0) }, removeFormat: function () { this.ec("removeFormat", !1, []), this.unlink() }, link: function () { !0 === r.msie ? this.ec("createLink", !0) : this.ec("createLink", !1, prompt("Link URL:", "http://")) }, unlink: function () { this.ec("unlink", !1, []) }, embed: function () { var t = prompt("HTML to Embed", ""); null != t && this.pasteHTML(t) }, orderedList: function () { this.ec("insertorderedlist") }, unorderedList: function () { this.ec("insertunorderedlist") }, superscript: function () { this.ec("superscript") }, subscript: function () { this.ec("subscript") }, p: function () { this.formatBlock("<p>") }, h1: function () { this.heading(1) }, h2: function () { this.heading(2) }, h3: function () { this.heading(3) }, h4: function () { this.heading(4) }, h5: function () { this.heading(5) }, h6: function () { this.heading(6) }, heading: function (t) { this.formatBlock(!0 === r.msie ? "Heading " + t : "h" + t) }, indent: function () { this.ec("indent") }, outdent: function () { this.ec("outdent") }, insertHorizontalRule: function () { this.ec("insertHorizontalRule", !1, "ht") }, justifyLeft: function () { this.ec("justifyLeft") }, justifyCenter: function () { this.ec("justifyCenter") }, justifyRight: function () { this.ec("justifyRight") }, increaseFontSize: function () { !0 === r.msie ? this.ec("fontSize", !1, this.qc("fontSize") + 1) : r.safari ? this.getRange().surroundContents(l(this.iframe[0].contentWindow.document.createElement("span")).css("font-size", "larger")[0]) : this.ec("increaseFontSize", !1, "big") }, decreaseFontSize: function () { !0 === r.msie ? this.ec("fontSize", !1, this.qc("fontSize") - 1) : r.safari ? this.getRange().surroundContents(l(this.iframe[0].contentWindow.document.createElement("span")).css("font-size", "smaller")[0]) : this.ec("decreaseFontSize", !1, "small") }, forecolor: function (t) { this.ec("foreColor", !1, void 0 !== t ? t : prompt("Enter HTML Color:", "#")) }, formatBlock: function (t) { this.ec("formatblock", !1, t || null) }, showHTMLView: function () { this.updateTextArea(), this.textarea.show(), this.htmlarea.hide(), l("ul li:not(li:has(a.html))", this.toolbar).hide(), l("ul:not(:has(:visible))", this.toolbar).hide(), l("ul li a.html", this.toolbar).addClass("highlighted") }, hideHTMLView: function () { this.updateHtmlArea(), this.textarea.hide(), this.htmlarea.show(), l("ul", this.toolbar).show(), l("ul li", this.toolbar).show().find("a.html").removeClass("highlighted") }, toggleHTMLView: function () { this.textarea.is(":hidden") ? this.showHTMLView() : this.hideHTMLView() }, toHtmlString: function () { return this.editor.body.innerHTML }, toString: function () { return this.editor.body.innerText }, updateTextArea: function () { this.textarea.val(this.toHtmlString()) }, updateHtmlArea: function () { this.editor.body.innerHTML = this.textarea.val() } }, h.fn.init.prototype = h.fn, h.defaultOptions = { toolbar: [["html"], ["bold", "italic", "underline", "strikethrough", "|", "subscript", "superscript"], ["increasefontsize", "decreasefontsize"], ["orderedlist", "unorderedlist"], ["indent", "outdent"], ["justifyleft", "justifycenter", "justifyright"], ["link", "unlink", "image", "embed", "horizontalrule"], ["p", "h1", "h2", "h3", "h4", "h5", "h6"], ["cut", "copy", "paste"]], css: null, toolbarText: { bold: "Bold", italic: "Italic", underline: "Underline", strikethrough: "Strike-Through", cut: "Cut", copy: "Copy", paste: "Paste", h1: "Heading 1", h2: "Heading 2", h3: "Heading 3", h4: "Heading 4", h5: "Heading 5", h6: "Heading 6", p: "Paragraph", indent: "Indent", outdent: "Outdent", horizontalrule: "Insert Horizontal Rule", justifyleft: "Left Justify", justifycenter: "Center Justify", justifyright: "Right Justify", increasefontsize: "Increase Font Size", decreasefontsize: "Decrease Font Size", forecolor: "Text Color", link: "Insert Link", unlink: "Remove Link", image: "Insert Image", embed: "Insert Embedded link (e.g. YouTube)", orderedlist: "Insert Ordered List", unorderedlist: "Insert Unordered List", subscript: "Subscript", superscript: "Superscript", html: "Show/Hide HTML Source View" } }; var c = { toolbarButtons: { strikethrough: "strikeThrough", orderedlist: "orderedList", unorderedlist: "unorderedList", horizontalrule: "insertHorizontalRule", justifyleft: "justifyLeft", justifycenter: "justifyCenter", justifyright: "justifyRight", increasefontsize: "increaseFontSize", decreasefontsize: "decreaseFontSize", html: function (t) { this.toggleHTMLView() } }, initEditor: function (t) { var e = this.editor = this.iframe[0].contentWindow.document; if (e.designMode = "on", e.open(), e.write(this.textarea.val()), e.close(), t.css) { var i = e.createElement("link"); i.rel = "stylesheet", i.type = "text/css", i.href = t.css, e.getElementsByTagName("head")[0].appendChild(i) } }, initToolBar: function (s) { var a = this, h = function (t, e, i) { return l("<li/>").append(l("<a href='javascript:void(0);'/>").addClass(t).attr("title", e).click(function () { i.call(a, l(this)) })) }; function t(t) { for (var e = l("<ul/>").appendTo(a.toolbar), i = 0; i < t.length; i++) { var n = t[i]; if ("string" === (typeof n).toLowerCase()) if ("|" === n) e.append(l('<li class="separator"/>')); else { var o = function (t) { var e = c.toolbarButtons[t] || t; return "function" === (typeof e).toLowerCase() ? function (t) { e.call(this, t) } : function () { this[e](), this.editor.body.focus() } }(n.toLowerCase()), r = s.toolbarText[n.toLowerCase()]; e.append(h(n.toLowerCase(), r || n, o)) } else e.append(h(n.css, n.text, n.action)) } } if (0 !== s.toolbar.length && c.isArray(s.toolbar[0])) for (var e = 0; e < s.toolbar.length; e++)t(s.toolbar[e]); else t(s.toolbar) }, attachEditorEvents: function () { function t() { e.updateHtmlArea() } var e = this; this.textarea.click(t).keyup(t).keydown(t).mousedown(t).blur(t), this.iframe.blur(function () { e.previousRange = e.getRange() }); function i() { e.updateTextArea() } if (l(this.editor.body).click(i).keyup(i).keydown(i).mousedown(i).blur(i), l("form").submit(function () { e.toggleHTMLView(), e.toggleHTMLView() }), o.__doPostBack) { var n = __doPostBack; o.__doPostBack = function () { return e && e.toggleHTMLView && (e.toggleHTMLView(), e.toggleHTMLView()), n.apply(o, arguments) } } }, isArray: function (t) { return t && "object" == typeof t && "number" == typeof t.length && "function" == typeof t.splice && !t.propertyIsEnumerable("length") } } }(jQuery, window);